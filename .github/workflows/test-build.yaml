name: Build pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  sonar:
    name: Test and Analyze with SonarCloud
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unity-version: [ 2022.3.19f1 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
      - name: Restore Unity Installation Cache
        id: cache-unity
        uses: actions/cache@v2
        with:
          path: unity-editors/${{ runner.os }}-unity-${{ matrix.unity-version }}
          key: ${{ runner.os }}-unity-${{ matrix.unity-version }}
      - name: Setup dotnet 5 for SonarQube
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '5.0.x'
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu' # Alternative distribution options are available.
# wget -qO - https://hub.unity3d.com/linux/keys/public | gpg --dearmor | sudo tee /usr/share/keyrings/Unity_Technologies_ApS.gpg > /dev/null
#           sudo sh -c 'echo "deb [signed-by=/usr/share/keyrings/Unity_Technologies_ApS.gpg] https://hub.unity3d.com/linux/repos/deb stable main" > /etc/apt/sources.list.d/unityhub.list'
#           sudo apt update
#           sudo apt-get install unityhub 
      - name: FINE I'LL DO IT MYSELF
        run: |
          mkdir -p "/home/runner/Unity Hub/" "/home/runner/.config/Unity Hub"
          

          wget "https://public-cdn.cloud.unity3d.com/hub/prod/UnityHub.AppImage" -P "/home/runner/Unity Hub"
          chmod +x "/home/runner/Unity Hub/UnityHub.AppImage"
          sudo apt-get update
          sudo apt-get install -y libgconf-2-4 libglu1 libasound2 libgtk2.0-0 libgtk-3-0 libnss3 zenity xvfb libfuse2 at-spi2-core
          xvfb-run --auto-servernum "/home/runner/Unity Hub/UnityHub.AppImage" --headless help

      # - name: Install Dependencies
      #   run: |
      #     sudo apt-get -y install libfuse2
      #     sudo apt-get install at-spi2-core
      # - name: Setup Unity for SonarQube
      #   id: setup-unity
      #   uses: kuler90/setup-unity@v1
      #   with:
      #     project-path: aplib.net-demo/
      #     install-path: unity-editors/${{ runner.os }}-unity-${{ matrix.unity-version }}
      #   if: steps.cache-unity.outputs.cache-hit != 'true'
      # - name: Activate Unity for SonarQube
      #   uses: kuler90/activate-unity@v1
      #   with:
      #     unity-username: ${{ secrets.UNITY_EMAIL }}
      #     unity-password: ${{ secrets.UNITY_PASSWORD }}
      #     unity-serial: ${{ secrets.UNITY_SERIAL }}
      #     project-path: aplib.net-demo/



      - name: SonarQube Analysis
        env:
          FrameworkPathOverride: ${{ steps.setup-unity.outputs.unity-path }}/../Data/MonoBleedingEdge/
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo rm -rf .\.sonar\scanner
          pwd; ls -alh
          xvfb-run --auto-servernum ${{ env.UNITY_PATH }} -batchmode -nographics -quit -logFile "-" -customBuildName aplib.net-demo -projectPath aplib.net-demo/ -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolution
          pwd; ls -alh
          sed -i 's/<ReferenceOutputAssembly>false<\/ReferenceOutputAssembly>/<ReferenceOutputAssembly>true<\/ReferenceOutputAssembly>/g' *.csproj
          sed -i 's/\([A-Za-z0-9.-]\+csproj\)/Card-Game-Simulator\/&/g' Card-Game-Simulator.sln
          mv aplib.net-demo.sln ..
          cd ..
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin \
            .\.sonar\scanner\dotnet-sonarscanner begin \
            /k:"team-zomsa_aplib.net-demo" /o:"team-zomsa" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml \
          dotnet build aplib.net-demo.sln
          dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
          cd aplib.net-demo
      # - name: Install SonarCloud scanner
      #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      #   shell: powershell
      #   run: |
      #     New-Item -Path .\.sonar\scanner -ItemType Directory
      #     dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      # - name: Generate .sln and .csproj files
      #   shell: powershell
      #   run: |
      #     Unity -batchmode -quit -projectPath aplib.net-demo -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolution
      #     sed -i 's/<ReferenceOutputAssembly>false<\/ReferenceOutputAssembly>/<ReferenceOutputAssembly>true<\/ReferenceOutputAssembly>/g' *.csproj
      #     ls -R
      #     sed -i 's/\([A-Za-z0-9.-]\+csproj\)/aplib.net-demo\/&/g' aplib.net-demo.sln
      #     ls -R
      #     mv aplib.net-demo.sln ..
      #     ls -R
      # - name: Prepare SonarCloud analysis
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   shell: powershell
      #   run: >
      #     .\.sonar\scanner\dotnet-sonarscanner begin
      #     /k:"team-zomsa_aplib.net-demo" /o:"team-zomsa"
      #     /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      #     /d:sonar.host.url="https://sonarcloud.io"
      #     /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
      # - name: List files before building
      #   run: |
      #     ls -R
      # - name: Build the project
      #   shell: powershell
      #   run: |
      #     dotnet build --no-incremental aplib.net-demo\aplib.net-demo.sln
      # - name: List files after building
      #   run: |
      #     ls -R
      # - name: Run SonarCloud analysis
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   shell: powershell
      #   run: |
      #     .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  # build:
  #   name: Build for ${{ matrix.targetPlatform }}, ${{ matrix.unity-version }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       unity-version:
  #         - 2022.3.19f1
  #       targetPlatform: 
  #         - StandaloneOSX
  #         - StandaloneWindows64
  #         - StandaloneLinux64
  #         - WebGL
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #         lfs: true
  #     - name: Cache Dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: Library
  #         key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
  #         restore-keys: |
  #           Library-
  #     - name: Build for ${{ matrix.targetPlatform }}, ${{ matrix.unity-version }}
  #       uses: game-ci/unity-builder@v4
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #       with:
  #         targetPlatform: ${{ matrix.targetPlatform }}
  #         unityVersion: ${{ matrix.unity-version }}
  #         projectPath: aplib.net-demo
  #     - name: Upload Artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build
  #         path: build